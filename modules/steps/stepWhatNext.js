const { getNextSpec, setAskedSpec } = require('../utils');
const { getPromptForSpec, getPromptForProjectType } = require('../questions');
const { sendMessage } = require('../messenger');
const { buildSpecSummary } = require('../specEngine');


// Pose la prochaine question de spÃ©cification Ã  l'utilisateur, si nÃ©cessaire.
// Retourne true au directeur si une question a Ã©tÃ© posÃ©e, false sinon, indiquant la fin des questions.
// Cette fonction ne dirige PAS le flux gÃ©nÃ©ral (chatOnly, rÃ©sumÃ©, etc.) â€” cela reste la responsabilitÃ© du runDirector.

    async function stepWhatNext(context) {
    const { senderId, session } = context;
    const lang = session.language || 'fr';

    // ðŸš« Refus explicite du projet ou de la propriÃ©tÃ© â†’ aucune suite Ã  poser
    if (session.projectType === "E" || session.specValues.propertyUsage === "E") {
        console.log('[WHATNEXT] Refus explicite dÃ©tectÃ© â†’ arrÃªt');
        return false;
    }

    console.log("[WHATNEXT getNextSpec] projectType is currently set at", session.projectType);
    const nextSpec = getNextSpec(session.projectType, session.specValues, session.askedSpecs);
    console.log(`[WHATNEXT] Spec Ã  traiter : ${nextSpec}`);

    // ðŸ›‘ Cas de blocage ou rien Ã  poser
    if (!nextSpec || nextSpec === "none") {
        console.log('[WHATNEXT] Aucune spec Ã  poser â†’ arrÃªt');
        return false;
    }

    // âœ… RÃ©sumÃ© attendu
    if (nextSpec === "summary") {
        console.log('[WHATNEXT] Toutes les specs traitÃ©es, on passe au sommaire');
        const summary = buildSpecSummary(session, lang);
        await sendMessage(senderId, summary);
        return false;
    }

    // ðŸ§­ Projet non dÃ©fini â†’ poser la question projet
    if (nextSpec === "projectType") {
        const prompt = getPromptForProjectType(lang);
        console.log(`[WHATNEXT] Pose de la question projet â†’ ${prompt}`);
        await sendMessage(senderId, prompt);
        return true;
    }

    // ðŸŽ¯ SpÃ©cification normale Ã  poser
    session.currentSpec = nextSpec;
    setAskedSpec(senderId, nextSpec, 'question posÃ©e via stepWhatNext');

    const questionText = getPromptForSpec(session.projectType, nextSpec, lang);
    await sendMessage(senderId, questionText);
    return true;
}

module.exports = { stepWhatNext };
