const { setProjectType, initializeSpecFields, detectLanguageFromText, getNextSpec } = require('../utils');
const { getSession, saveSession, resetSession, logSessionState } = require('../sessionStore');

async function stepInitializeSession(context) {
    const { senderId, message } = context;

    // üîê STOP PROBL√àME EN VUE
    if (typeof senderId !== 'string' || senderId.trim() === '') {
        console.warn('[INIT] senderId manquant ‚Üí impossible de poursuivre.');
        return false;
    }

    const isEndSession = message.trim().toLowerCase() === 'end session';
    let session = getSession(senderId);

    if (isEndSession) {
      //  session = resetSession(context);
      //  session.language = detectLanguageFromText(message);  // ‚úÖ d√©tecte imm√©diatement
        context.session = null;

        // DEBUG VERROU
        console.log("[INIT end Session in progress] Session = ", JSON.stringify(session, null, 2));
        console.log("[INIT end Session in progress] getNextSpec = ", getNextSpec(session));
        console.log('[INIT end Session in protress] Session r√©initialis√©e par (end session)');
        return false;

    } else if (!session) {
        session = resetSession(context);
       // session.language = detectLanguageFromText(message);  // ‚úÖ d√©tecte imm√©diatement
        context.session = session;
        console.log('[INIT] Session cr√©√©e car absente');
        return true;
    }

    // üß† Affectation obligatoire avant traitement
    context.session = session;

    // üåç D√©tection de langue forc√©e pour la suite des choses
    if (!context.session.language) {
        context.session.language = detectLanguageFromText(message);
    }

    // ‚úÖ Si d√©j√† initialis√©e, rien √† faire
    if (session.specValues && session.askedSpecs) {
        console.log('[INIT] Session d√©j√† initialis√©e ‚Üí aucune action requise');
        return true;
    }

    return true;
}

module.exports = { stepInitializeSession };
