const { setProjectType, initializeSpecFields, detectLanguageFromText, getNextSpec, isText, isNumeric } = require('../utils');
const { getSession, saveSession, resetSession, logSessionState } = require('../sessionStore');
const { checkSenderInSheets } = require('../googleData')

async function stepInitializeSession(context) {
    const { senderId, message } = context;
    const isEndSession = message.trim().toLowerCase() === 'end session';
    let session;

    // Validate sender Id (protection, unlikely to come through this if)
    if (typeof senderId !== 'string' || senderId.trim() === '') {
        console.warn('[INIT] senderId manquant ‚Üí impossible de poursuivre.');
        return false;
    }

    // Manage end session call
    if (isEndSession) {

        session = resetSession(context);
        context.session = session;
       // context.session.mode = 'end session';
        // DEBUG VERROU
        console.log('[INIT end session] Session explicitement remise √† null.');
        return false;
    }

    // Initialisation normale
    if (!context.session || context.session.senderId !== senderId) {
        // Cr√©er une nouvelle session pour l'utilisateur courant
        session = getSession(senderId);
        if (!session) {
            session = resetSession(context);  // Cr√©er une nouvelle session si elle n'existe pas
            if (isText(message) && !isNumeric(message)) {
                session.language = detectLanguageFromText(message);  // ‚úÖ tentative de d√©tection
            }
            if (!session.language) {
                session.language = "fr";  // üîí fallback robuste si rien d√©tect√©
            }
            console.log(`[INIT] ***** Session re-cr√©√©e, langue='${session.language}' pour '${message}'`);
        }
        context.session = session;

        return true;
    } else {
        // Utiliser la session existante si elle correspond √† l'utilisateur
        session = context.session;
        return true;
    }


    // üß† Affectation obligatoire avant traitement
    if (isText(message) && typeof session.language !== 'string') {
        session.language = detectLanguageFromText(message);  // ‚úÖ d√©tecte imm√©diatement
        console.log(`[INIT] Langue d√©tect√©e:'${session.language}' pour '${message}'`);
    }

    context.session = session;

    // ‚úÖ Si d√©j√† initialis√©e, rien √† faire
    if (session.specValues && session.askedSpecs) {
        //   logSessionState("***[INIT session d√©j√† initialis√©e]", session);
        //    console.log('[INIT] Session d√©j√† initialis√©e ‚Üí aucune action requise');
        console.log(`[INIT] *** Session re-cr√©√©e car manquante langue d√©tect√©e:'${session.language}' pour '${message}'`);
        return true;
    }

    return true;
}

module.exports = { stepInitializeSession };


