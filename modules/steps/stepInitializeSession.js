const { setProjectType, initializeSpecFields, detectLanguageFromText } = require('../utils');
const { getSession, saveSession, resetSession, logSessionState } = require('../sessionStore');

async function stepInitializeSession(context) {
    const { senderId, message } = context;

    // üîê STOP PROBL√àME EN VUE
    if (typeof senderId !== 'string' || senderId.trim() === '') {
        console.warn('[INIT] senderId manquant ‚Üí impossible de poursuivre.');
        return false;
    }

    const isEndSession = message.trim().toLowerCase() === 'end session';
    let session = getSession(senderId);

    if (isEndSession) {
        session = resetSession(context);
        console.log('[INIT] Session r√©initialis√©e par (end session)');
    } else if (!session) {
        session = resetSession(context);
        console.log('[INIT] Session cr√©√©e car absente');
    }

    // üß† Affectation obligatoire avant traitement
    context.session = session;

    // üåç D√©tection de langue forc√©e pour la suite de choses
    if (!context.session.language) {
        context.session.language = detectLanguageFromText(message);
    }

    // ‚úÖ Si d√©j√† initialis√©e, rien √† faire
    if (session.specValues && session.askedSpecs) {
        console.log('[INIT] Session d√©j√† initialis√©e ‚Üí aucune action requise');
        return true;
    }



    logSessionState("V√©rification APR√àS une initialisation propre", session);
    return true;
}

module.exports = { stepInitializeSession };
