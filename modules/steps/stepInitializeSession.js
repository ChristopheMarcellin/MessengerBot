const { setProjectType, initializeSpecFields, detectLanguageFromText } = require('../utils');
const { getSession, saveSession, resetSession, logSessionState } = require('../sessionStore');

async function stepInitializeSession(context) {
    const { senderId, message } = context;

    // üîß Traitement prioritaire du End Session m√™me si session absente
    const isEndSession = message.trim().toLowerCase() === 'end session';
    if (isEndSession) {
        const newSession = resetSession(context);
        saveSession(context);
        context.session = newSession;
        console.log('[INIT] "end session" d√©tect√© ‚Üí session r√©initialis√©e √† neuf');
        setProjectType(context.session, "?", "reset after end session");
        logSessionState("V√©rification APR√àS end session", context.session);
        return true;
    }

    const session = context.session;


    // üõ° Protection : session d√©j√† initialis√©e
    if (session?.specValues && session?.askedSpecs) {
        context.session = session;
        console.log('[INIT] Session d√©j√† initialis√©e ‚Üí aucune action requise');
        return true;
    }

    // üîê Assurer la pr√©sence du senderId
    if (typeof senderId !== 'string' || senderId.trim() === '') {
        console.warn('[INIT] senderId manquant ‚Üí impossible de poursuivre.');
        return false;
    }

    // üß† Cr√©ation d'une session lorsque manquante ou corrompue
    context.session = session;
    if (!context.session || typeof context.session !== 'object') {
        console.log('[INIT] ALERTE session manquante probl√®mes en vue');
        return false;
    }

    // üîç Log AVANT r√©paration
    // logSessionState("V√©rification AVANT r√©paration", senderId);

    // üßº Normalisation, corrige/reset les variables suspectes ou aux donn√©es incompl√®tes 
    //**** NE JAMAIS √™tre tent√© de configurer le PROJECT TYPE DE LA SESSION ICI, CE QUI BRISERAIT LE SETPROJECTTYPE effectu√© dans une autre √©tape
    context.session.language ??= detectLanguageFromText(message); // üåê D√©tection automatique de la langue
    context.session.ProjectDate ??= new Date().toISOString();
    context.session.questionCount ??= 1;
    context.session.maxQuestions ??= 40;
    context.session.askedSpecs ??= {};
    context.session.specValues ??= {};
    context.session.currentSpec ??= null;

    saveSession(context);
    // üîç Log APR√àS r√©paration/normalisation
    logSessionState("V√©rification APR√àS une initialisation propre", context.sesion);
    return true;
}

module.exports = { stepInitializeSession };
