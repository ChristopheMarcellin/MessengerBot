const { setProjectType, initializeSpecFields } = require('../utils');
const { getSession, setSession } = require('../sessionStore');

// üîé Fonction d'audit de la session
function logSessionState(label, session) {
    const snapshot = {
        language: session.language,
        ProjectDate: session.ProjectDate,
        questionCount: session.questionCount,
        maxQuestions: session.maxQuestions,
        askedSpecs: session.askedSpecs,
        specValues: session.specValues,
        projectType: session.projectType,
        currentSpec: session.currentSpec
    };
    console.log(`[INIT] ${label} :`, JSON.stringify(snapshot, null, 2));
}

async function stepInitializeSession(context) {
    const { senderId, message } = context;

    // üîê V√©rifier pr√©sence du senderId
    if (typeof senderId !== 'string' || senderId.trim() === '') {
        console.warn('[INIT] senderId manquant ‚Üí impossible de poursuivre.');
        return true;
    }

    // üß† Session existante ou cr√©ation vide
    let session = getSession(senderId);
    if (!session || typeof session !== 'object') {
        console.log('[INIT] Aucune session trouv√©e dans le store ‚Üí nouvelle session cr√©√©e');
        session = {};
    } else {
        console.log('[INIT] Session existante trouv√©e dans le store');
    }

    // üîç Log AVANT r√©paration
    logSessionState("V√©rification AVANT r√©paration", session);

    // üîß R√©paration
    const isEndSession = message.trim().toLowerCase() === 'end session';
    if (isEndSession) {
        console.log('[INIT] "end session" d√©tect√© ‚Üí session r√©initialis√©e √† neuf');
        session = {
            language: 'fr',
            ProjectDate: new Date().toISOString(),
            questionCount: 0,
            maxQuestions: 40,
            askedSpecs: {},
            specValues: {},
            projectType: undefined,
            currentSpec: null
        };
        setSession(senderId, session);
        context.session = session;

        logSessionState("V√©rification APR√àS r√©paration (post-reset)", session);
        return true;
    }

    // üßº Normalisation minimale
    session.language ??= 'fr';
    session.ProjectDate ??= new Date().toISOString();
    session.questionCount ??= 1;
    session.maxQuestions ??= 40;
    session.askedSpecs ??= {};
    session.specValues ??= {};
    session.currentSpec ??= null;

    // üîç Log APR√àS r√©paration
    logSessionState("V√©rification APR√àS r√©paration", session);

    // üéØ Analyse √©tat session existante
    const hasProject = typeof session.projectType === 'string' && ['B', 'S', 'R'].includes(session.projectType);
    const hasAskedSpecs = Object.values(session.askedSpecs).some(v => v === true);

    if (hasProject && hasAskedSpecs) {
        console.log('[INIT] Session en cours d√©tect√©e ‚Üí reprise possible');
        setSession(senderId, session);
        context.session = session;
        return true;
    }

    if (hasProject && !hasAskedSpecs) {
        console.log('[INIT] ProjectType connu mais specs non commenc√©es ‚Üí pr√™t √† commencer');
        setSession(senderId, session);
        context.session = session;
        return true;
    }

    // üìå Aucune classification ici ‚Äî laiss√© au directeur
    setSession(senderId, session);
    context.session = session;

    if (context?.session) {
        const realSession = context.session;
        let internalValue = realSession.projectType;
        console.log("[CHECK] D√©finition du setter projectType dans stepInitializeSession");

        Object.defineProperty(session, 'projectType', {
            configurable: true,
            enumerable: true,
            get() {
                return session._projectType;
            },
            set(value) {
                const err = new Error();
                console.log(`[ALERTE] projectType modifi√© via setter pi√©g√© ‚Üí ${value}`);
                console.log(`[TRACE] setProjectType ‚Üê`, err.stack);
                session._projectType = value;
            }

        })
    };

    return true;
}

module.exports = { stepInitializeSession };
